<?php
/**
 * @file
 * CALS Importer Module.
 */
/**
 * set memory limit and max execution times to higher than normal!
 */
//ini_set('memory_limit', '1024M');
//ini_set('max_execution_time', '600');
//the MARC namespace
define("NAME_SPACE", "http://www.loc.gov/MARC21/slim");
define("MARC_HEADER",
  '<collection
    xmlns:marc="http://www.loc.gov/MARC21/slim"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd">'
);
//require these files..
module_load_include('inc', 'cals_importer', 'cals_importer.misc');
module_load_include('inc', 'cals_importer', 'cals_importer.fieldcollections');
module_load_include('inc', 'cals_importer', 'cals_importer.mappings');
module_load_include('inc', 'cals_importer', 'cals_importer.marcxml');
module_load_include('inc', 'cals_importer', 'cals_importer.s3paths');
module_load_include('inc', 'cals_importer', 'cals_importer.createrecords');
module_load_include('inc', 'cals_importer', 'cals_importer.clean_up');
module_load_include('inc', 'cals_importer', 'cals_importer.deduper');
module_load_include('inc', 'cals_importer', 'cals_importer.marcxmlfilebuilder');
module_load_include('inc', 'cals_importer', 'cals_importer.exporter');

module_load_include('inc', 'cals_importer', 'cals_importer.corsS3');
module_load_include('inc', 'entity', 'includes/entity.controller');

/**
 * Implements hook_menu().
 */
function cals_importer_menu() {
  $items = array();

  $items['admin/config/cals_importer/normalization'] = array(
    'title' => 'Configure normalization settings',
    'description' => 'Configuration for the normalization settings in CALS IMPORTER',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cals_importer_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cals_importer.admin.inc',
  );

  /*
   * Parses S3 sets, can be invoked directly - e.g:
   * http://me/cals_staging/admin/content/cals/batch-update-s3-paths/5429
   *
   * See: content/cals/s3-record-sets
   *
   */
  $items['admin/content/cals/batch-update-s3-paths'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_batch_update_s3_paths',
    'title' => 'Update S3 Paths',
    'page arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 100,
  );

  /**
   * Fix to move OCLC entries out of the system control field
   * - deactivated so we don't run accidentally
   */
  $items['node/%node/fix-oclc-entry'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_update_oclc_numbers_single_node',
    'title' => 'Fix OCLC entry',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-repository-item-processing',
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,

  );
  $items['node/%node/fix-oclc-entry3'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_update_oclc_numbers_single_node',
    'title' => 'Fix OCLC entry',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-repository-item-processing',
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,

  );

  /**
   * Fix to move OCLC entries out of the system control field
   * - deactivated so we don't run accidentally
   */
  $items['node/fix-oclc-entry2'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_update_oclc_numbers_single_node',
    'title' => 'Fix OCLC entry TEST',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-repository-item-processing',
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,

  );


  $items['node/%node/parse-marcxml-new'] = array(
    'page callback' => '_cals_import_skeletal_records',
    'title' => "Generate / Update Stub Entries",
    'type' => MENU_CALLBACK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),

  );
  $items['node/%node/parse-marcxml-new2'] = array(
    'page callback' => '_cals_importer_create_repo_items',
    'file' => "cals_importer.createrecords.inc",
    'title' => "Generate / Update Stub Entries 2",
    'type' => MENU_CALLBACK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
  );

  $items['node/%node/preview-titles'] = array(
    'page callback' => '_cals_importer_preview_repo_items',
    'file' => "cals_importer.createrecords.inc",
    'title' => "Preview New Titles in Collection",
    'type' => MENU_CALLBACK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
  );
  //generate cors s3 file via s3 path (field collection)
  $items['admin/%node/update-file-upload-from-field-collection'] = array(
    'page callback' => '_cals_update_filecollection_file',
    'title' => "Update via Field Collection",
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 3),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
    'file' => 'cals_importer.corsS3.inc',

  );

  //re-parse Publisher from 264 tag
  $items['admin/%node/update-publisher-264'] = array(
    'page callback' => '_cals_update_publisher_264_tag',
    'title' => "Update Publisher Via 264",
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
    'file' => 'cals_importer.clean_up.inc',

  );
  //menu callback to provide access to creating the parent xml stub
  $items['node/%node/view-xml-stub'] = array(
    'page callback' => '_cals_importer_view_marcxml_stub',
    'title' => "View XML Stub",
    'type' => MENU_LOCAL_TASK,
    'type' => MENU_CALLBACK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('view marcxml stub'),
    'file' => 'cals_importer.exporter.inc',

  );
  //menu callback to provide access to re-validate / view xml stub
  $items['node/%node/build-validate-marcxml-output'] = array(
    'page callback' => '_cals_importer_exporter_build_marcxml_from_array',
    'title' => "Validate / Preview XML Stub",
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('view marcxml stub'),
    'file' => 'cals_importer.exporter.inc',
  );
  //generate cors s3 filesize values
  $items['admin/%node/update-filesize-field-collection'] = array(
    'page callback' => '_cals_update_filecollection_file_filesize',
    'title' => "Update via Field Collection",
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 3),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
    'file' => 'cals_importer.corsS3.inc',

  );

  $items['admin/content/cals/files/update-s3-filesizes'] = array(
    'title' => 'Update S3 Filesizes',
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_batch_update_filesizes',
    'file' => 'cals_importer.corsS3.inc',
    'type' => MENU_CALLBACK,
  );

  //code to build file-snippet
  if (module_exists('field_collection')) {
    // Add menu paths for viewing/editing/deleting field collection items.
    foreach (field_info_fields() as $field) {
      if ($field['type'] == 'field_collection' &&
        $field['field_name'] == 'field_file_resource' ) {
        $path = field_collection_field_get_path($field);
        $items[$path . '/%field_collection_item/build_snippet'] = array(
          'page callback' => '_cals_importer_exporter_build_marcxml_file_node',
          'title' => "Build Snippet",
          'type' => MENU_LOCAL_TASK,
          //'type' => MENU_CALLBACK,
          //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'page arguments' => array(2),
          'weight' => 100,
          'access arguments' => array('field_collection_item', 2),
          'access arguments' => array('view marcxml stub'),
          'file' => 'cals_importer.exporter_file_snippets.inc',
        );
        $items[$path . '/%field_collection_item/tmp-test-date-created'] = array(
          'page callback' => '_cals_importer_exporter_update_date_created_entity',
          'title' => "Copy Date Created (node) to Date Created (file)",
          'type' => MENU_LOCAL_TASK,
          //'type' => MENU_CALLBACK,
          //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'page arguments' => array(2),
          'weight' => 100,
          'access arguments' => array('field_collection_item', 2),
          'access arguments' => array('view marcxml stub'),
          'file' => 'cals_importer.clean_up.inc',
        );
        $items[$path . '/%field_collection_item/tmp-test-date-copyrighted'] = array(
          'page callback' => '_cals_importer_exporter_update_date_copyrighted_entity',
          'title' => "Copy Date Copyrighted (node) to Date Created (file)",
          'type' => MENU_LOCAL_TASK,
          //'type' => MENU_CALLBACK,
          //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'page arguments' => array(2),
          'weight' => 100,
          'access arguments' => array('field_collection_item', 2),
          'access arguments' => array('view marcxml stub'),
          'file' => 'cals_importer.clean_up.inc',
        );
        $items[$path . '/%field_collection_item/tmp-test-date-issued'] = array(
          'page callback' => '_cals_importer_exporter_update_date_issued_entity',
          'title' => "Copy Date Issued (node) to Date Created (file)",
          'type' => MENU_LOCAL_TASK,
          //'type' => MENU_CALLBACK,
          //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'page arguments' => array(2),
          'weight' => 100,
          'access arguments' => array('field_collection_item', 2),
          'access arguments' => array('view marcxml stub'),
          'file' => 'cals_importer.clean_up.inc',
        );
        $items[$path . '/%field_collection_item/tmp-test-date-noqualifier'] = array(
          'page callback' => '_cals_importer_exporter_update_date_noqualifier_entity',
          'title' => "Copy Date No Qualifier (node) to Date Created (file)",
          'type' => MENU_LOCAL_TASK,
          //'type' => MENU_CALLBACK,
          //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'page arguments' => array(2),
          'weight' => 100,
          'access arguments' => array('field_collection_item', 2),
          'access arguments' => array('view marcxml stub'),
          'file' => 'cals_importer.clean_up.inc',
        );


        $items[$path . '/%field_collection_item/tmp-test-copy-publisher'] = array(
          'page callback' => '_cals_importer_exporter_update_publisher_entity',
          'title' => "Update Publisher",
          'type' => MENU_LOCAL_TASK,
          //'type' => MENU_CALLBACK,
          //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'page arguments' => array(2),
          'weight' => 100,
          'access arguments' => array('field_collection_item', 2),
          'access arguments' => array('view marcxml stub'),
          'file' => 'cals_importer.clean_up.inc',
        );

      }
    }
  }


  $items['_cals_importer_exporter_build_marcxml_file_node'] = array(
    'title' => "Add MARC-ready file snippet",
    'access arguments' => array('parse s3 paths'),
    'page callback' => '_cals_importer_exporter_build_marcxml_file_node',
    'file' => "cals_importer.exporter.inc",
    'description' => 'Add MARC-ready file snippet',
  );



  return $items;



}

/**
 * Implements  hook_menu_alter().
 * Remember to clear the menu cache after adding/editing this function.
 */
function cals_importer_menu_alter(&$items) {
  // Removing certain local navigation tabs that are either undesired or need to be custom relocated.
  // Set these tabs to MENU_CALLBACK, so they still register the path, but just don't show the tab:
  $items['node/%node/parse-access-rights']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/parse-record']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/parse-marcxml-new']['access callback'] = '_cals_importer_tab_checker';
  $items['node/%node/parse-marcxml-new2']['access callback'] = '_cals_importer_tab_checker';
  $items['node/%node/normalize-publisher']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/normalize-title']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/clean-author']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/generate-marc-856']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/generate-marc-output']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/convert-s3-paths']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/normalize-record']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/fix-oclc-entry']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/normalize-record-preview']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/parse-s3-path-node']['access callback'] = '_cals_importer_tab_checker_parse_s3_paths';
  $items['node/%node/view-xml-stub']['access callback'] = '_cals_importer_tab_checker_xmlstub';

}

/**
 * Implements hook_permission().
 */
function cals_importer_permission() {
  return array(
    'dedupe records' => array(
      'title' => t('Dedupe Repo Items'),
      'description' => t('Dedupe Repo Items.'),
    ),
    'parse s3 paths' => array(
      'title' => t('Parse S3 paths'),
      'description' => t('Parse S3 Paths.'),
    ),
    'parse marc records' => array(
      'title' => t('Parse MARC records'),
    ),
    'view marcxml stub' => array(
      'title' => t('View MARC-XML Stub'),
    ),
    'generate repo records' => array(
      'title' => t('Generate New Repository Items'),
    ),
    'parse 506' => array(
      'title' => t('Parse / Update 506 entries'),
      'description' => t(''),
    ),
    'access normalization configuration' => array(
      'title' => t('Access normalization configuration'),
      'description' => t('Used to configure end of string and other types of stopwords'),
    ),
  );
}

/**
 * Implements action_info().
 */
function cals_importer_action_info() {
  return array(
    //the main MARC XML parser
    '_cals_importer_update_repository_items' => array(
      'label' => t('1. Generate Full Record (parse MARC XML)'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),

    //Reparse selected fields: hooks into main parser
    '_cals_reparse_record_details' => array(
      'label' => t('CALS: Re-parse Selected Fields'),
      'type' => 'node',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),

    //Copy file resource entities between nodes
    '_cals_transfer_file_resource_entity' => array(
      'label' => t('Transfer File Resource Entities'),
      'type' => 'node',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),

    //batch update title field, stripping out trailing slashes, etc.
    '_cals_normalize_record_values' => array(
      'label' => t('2. Normalize Title, Publisher, Creators'),
      'type' => 'node',
      'configurable' => FALSE, //TRUE,
      'triggers' => array('any'),
    ),

    //batch update Genre, Subjects.
    '_cals_normalize_performer' => array(
      'label' => t('CALS: Normalize Performer Values'),
      'type' => 'entity',
      'configurable' => FALSE, //TRUE,
      'triggers' => array('any'),
    ),
    //batch titlecase creator names
    '_cals_titlecase_creators' => array(
      'label' => t('CALS: Convert Creators to Title Case'),
      'type' => 'entity',
      'configurable' => FALSE, //TRUE,
      'triggers' => array('any'),
    ),
    //batch update Genre, Subjects.
    '_cals_normalize_taxonomy_terms2' => array(
      'label' => t('CALS: Normalize Taxonomy Terms 2'),
      'type' => 'taxonomy_term',
      'configurable' => FALSE, //TRUE,
      'triggers' => array('any'),
    ),

    //batch copy subject field collection values to simpler subject field
    '_cals_copy_field_collection_values_to_subjects' => array(
      'label' => t('CALS: Copy Field Collections to Subject Field'),
      'type' => 'node',
      'configurable' => FALSE, //TRUE,
      'triggers' => array('any'),
    ),

    //batch update Genre, Subjects.
    '_cals_normalize_taxonomy_terms' => array(
      'label' => t('CALS: Normalize Taxonomy Terms'),
      'type' => 'entity',
      'configurable' => FALSE, //TRUE,
      'triggers' => array('any'),
    ),
    //bulk update to generate marc xml strings w/ 856 tag
    '_cals_importer_generate_marc_xml_856' => array(
      'label' => t('3. Generate MARC with 856 strings'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),

    //batch generate MARC XML files and attach to original recordset
    '_cals_importer_generate_marcxml_files' => array(
      'label' => t('4. Generate downloadable MARC XML files'),
      'type' => 'node',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),

    //move Publisher into Publisher Source and add new Publisher
    '_cals_importer_update_publisher_and_source' => array(
      'label' => t('5. Update Publisher and Publisher Source'),
      'type' => 'node',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),

    //batch generate MARC XML files from search interface
    '_cals_importer_generate_marcxml_files_search_interface' => array(
      'label' => t('CALS: Generate downloadable MARC XML files (search interface)'),
      'type' => 'entity',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),

    //preview changes to Author
    '_cals_importer_normalize_creators_preview_vbo' => array(
      'label' => t("CALS: Preview Creator Normalization"),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update to just the system control numbers
    '_cals_importer_fix_oclc_numbers_batch' => array(
      'label' => t("CALS: Fix Dave's STUPID OCLC bug!"),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update to just the system control numbers
    '_cals_importer_update_system_control_numbers' => array(
      'label' => t('CALS: Update System Control Numbers'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update to adjust/update the 506 access rights permissions
    '_cals_importer_update_licensed_access' => array(
      'label' => t('CALS: Update Access Restrictions'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch dedupe marc xml records
    '_cals_dedupe_035' => array(
      'label' => t('CALS: Dedupe on 035 matches'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch dedupe org nodes based on ill code (field_library_code)
    '_cals_dedupe_orgs_by_illcode' => array(
      'label' => t('CALS: Dedupe orgs based on ILL Code matches'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch copy existing S3 paths to Field Collection "field_file_resource"
    '_cals_run_batch_update_field_collection_s3_path' => array(
      'label' => t('CALS: Copy S3 paths to Field Collection'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update missing file-size values in Field Collection "field_file_resource"
    '_cals_run_batch_update_field_collection_s3_filesizes' => array(
      'label' => t('CALS: Batch update S3 Filesize Values'),
      'type' => 'entity',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //copy date created values in node over to field collection
    '_cals_importer_exporter_update_date_created_entity_vbo' => array(
      'label' => t('CALS: Copy Node Date (Created / Issued) to Field Collection (FILE)'),
      'type' => 'entity',
      'configurable' => FALSE,
      'configurable' => TRUE,

      'triggers' => array('any'),
    ),
    '_cals_importer_exporter_update_publisher_and_datecreated_vbo' => array(
      'label' => t('CALS: Copy Date Created and Publisher to Field Collection (FILE)'),
      'type' => 'entity',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    '_cals_importer_exporter_update_publisher_vbo' => array(
      'label' => t('CALS: Copy Publisher to Field Collection (FILE)'),
      'type' => 'entity',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    //batch amend broken S3 paths in Field Collection "field_file_resource"
    '_cals_mend_broken_file_resource_s3_paths' => array(
      'label' => t('Mend Broken S3 paths'),
      'type' => 'entity',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */

function cals_importer_block_info() {
  $blocks = array();

  $blocks['_cals_importer_process_repo_item'] = array(
    'info' => t('CALS Forms: Process Repo Item'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function cals_importer_block_view($delta = '') {
  switch ($delta) {
    //include with main repo page
    case "_cals_importer_process_repo_item":
      $block = array();
      global $user;
      if (arg(0) == 'node') {
        $node = node_load(arg(1));
        if ($node->type == 'repository_item') {
          $block['subject'] = '';
          $content = drupal_get_form('_cals_importer_block_process_repo_item');
          $block['content'] = $content; //'HERE IN WILL LIE THE ADMIN BLOCK'; //drupal_render(drupal_get_form('user_register_form'));
          return $block;
        }
      }
      break;
  }
}

function _cals_importer_get_block_items() {

  $items = array();

//  $items['_cals_importer_update_repository_item'] = array(
//    'access arguments' => array('administer site configuration'),
//    'page callback' => '_cals_importer_update_repository_item',
//    'title' => 'Parse MARC/XML',
//    'file' => "cals_importer.marcxml.inc",
//    'description' => "Item parsed",
//  );


//  $items['_cals_reparse_titles_edition'] = array(
//    'access arguments' => array('administer site configuration'),
//    'page callback' => '_cals_reparse_title_edition',
//    'file' => "cals_importer.marcxml.inc",
//    'title' => 'Reparse Titles / Edition',
//    'description' => 'Reparses title fields + dc relation field',
//
//  );


  $items['_cals_normalize_record_value'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_normalize_record_value',
    'file' => "cals_importer.clean_up.inc",
    'title' => 'Normalize Title, Creator/Contributor, Publisher',
    'description' => 'Title, author and publisher values normalized',
  );

  /*
    $items['_cals_normalize_record_value_preview'] = array(
      'access arguments' => array('administer site configuration'),
      'page callback' => '_cals_normalize_record_value_preview',
      'file' => "cals_importer.clean_up.inc",
      'title' => 'Preview Creator Normalization',
      'description' => 'No updates: just previewing the normalization',
    );

  */

  $items['_cals_importer_add_856_tag'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_add_856_tag',
    'file' => "cals_importer.clean_up.inc",
    'title' => 'Add 856 tag',
    'description' => '856 tag added',
  );
  //code to build stub marc xml output
  $items['_cals_importer_create_marc_stub_node'] = array(
    'access arguments' => array('parse s3 paths'),
    'page callback' => '_cals_importer_create_marc_stub_node',
    'file' => "cals_importer.exporter.inc",
    'title' => "Build Record Stub",
    'description' => 'Created the MARCXML stub',
  );

//  $items['_cals_importer_exporter_build_marcxml_from_array'] = array(
//    'access arguments' => array('parse s3 paths'),
//    'page callback' => '_cals_importer_exporter_build_marcxml_from_array',
//    'file' => "cals_importer.exporter.inc",
//    'title' => "Build / Validate MARC-XML File",
//    'description' => 'Added MARC-XML File',
//  );


  /*
    $items['_cals_importer_generate_marcxml_file'] = array(
      'access arguments' => array('administer site configuration'),
      'page callback' => '_cals_importer_generate_marcxml_file',
      'file' => "cals_importer.marcxmlfilebuilder.inc",
      'title' => 'Create MARC Output File',
      'description' => 'An XML file generated for this node',

    ); */
   $items['_cals_importer_create_marcxml_snippet_file_resource'] = array(
    'access arguments' => array('parse s3 paths'),
    'page callback' => '_cals_importer_create_marcxml_snippet_file_resource',
    'file' => "cals_importer.exporter.inc",
    'title' => "Build File Snippet",
    'description' => 'Built record snippets per file resource',
  );

  /**
   * Parses S3 sets via node page
   */

  /*
    $items['_cals_batch_update_s3_paths_by_node'] = array(
      'access arguments' => array('administer site configuration'),
      'page callback' => '_cals_batch_update_s3_paths_by_node',
      'file' => "cals_importer.s3paths.inc",
      'title' => 'Parse S3 Paths',
    );
  */

  $items['_cals_importer_update_cors_file_table'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_update_cors_file_table',
    'file' => "cals_importer.corsS3.inc",
    'title' => 'Create attachment from S3 path',
    /* 'description' => 'S3 path parsed and attempted to create new file', */
  );


  return $items;
}

function _cals_importer_block_process_repo_item($form_state) {
  if (arg(0) == "node" && is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);
    if ($node->type == 'repository_item') {
      //$options = array( l("parse record", "node/63268/parse-record") );
      $form['nid'] = array(
        '#type' => "hidden",
        '#default_value' => $nid,
      );

      $items = _cals_importer_get_block_items();
      foreach ($items as $i) {

        $cb = $i['page callback'];
        $include = TRUE;
        if(!user_access($i['access arguments'][0])) $include = FALSE;

        if($cb == 'cals_importer_exporter_build_marcxml_from_array' && empty($node->field_xml_stub)) {
          //$include = FALSE;
        }

        if ($include) {
          if($cb == 'drupal_get_form') {
            $cb = $i['page arguments'][0];
          }
          $options[$cb] = $i['title'];

          $form['op'][$cb] = array(
            '#type' => 'submit',
            '#id' => $cb,
            '#value' => $i['title'],
          );
        }
      }
      return $form;

    }
  }
  return;
}

function _cals_importer_block_process_repo_item_submit($form, &$form_state) {
  $op = $form_state['values']['op'];
  $callback = array_search($op, $form_state['values']);
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  $items = _cals_importer_get_block_items();


  if (empty($callback)) {
    return;
  }
  else {
    $i = $items[$callback];
    if (!user_access($i['access arguments'][0])) {
      return;
    }
    //load inc file if exists
    if (isset($i['file'])) {
      module_load_include('inc', 'cals_importer', str_replace($i['file'], ".inc", ""));
    }
    if (isset($i['description'])) {
      drupal_set_message($i['description']);
    }
    //printAndDie($callback);
    //if (isset())
    $callback($node);
  }
}

function _cals_importer_update_publisher_and_source_form($options) {

  if ( $options['entity_type'] == 'node') {
    $vocabulary = taxonomy_vocabulary_machine_name_load('publisher');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    //printAndDie($terms);
    $options = array();
    foreach($terms as $tid => $value) {
      //printAndDie($value);
      $options[$value->name] = $value->name;
    }
    //printAndDie($options);
    $form = array();
    $form['publisher'] = array(
      '#type' => 'select',
      '#title' => t('Publisher'),
      '#description' => t("Please select the Publisher Name."),
      '#required' => TRUE,
      '#default_value' => '',
      '#options' => $options,
    );
    return $form;
  }

}

function _cals_importer_update_publisher_and_source_submit($form, $form_state) {
  $return['publisher'] = $form_state['values']['publisher'];
  return $return;
}

function _cals_importer_update_publisher_and_source(&$node, $context) {

  $publisher = $context['publisher'];
  $field_publisher = array();
  if(!empty($node->field_publisher)) {
    foreach($node->field_publisher[LANGUAGE_NONE] as $k => $v) {
      $field_publisher[] = $v['value'];
    }
  }
  $current_publisher = implode(", ", $field_publisher);

  //publisher_source
  $field_publisher_source = array();
  if(!empty($node->field_publisher_source)) {
    foreach($node->field_publisher_source[LANGUAGE_NONE] as $k => $v) {
      $field_publisher_source[] = $v['value'];
    }
  }
  $current_publisher_source = implode(", ", $field_publisher_source);

  if($publisher != $current_publisher && $publisher != $current_publisher_source) {
    $node->field_publisher_source[LANGUAGE_NONE] = array();
    $node->field_publisher_source[LANGUAGE_NONE][0]['value'] = $current_publisher;

    $node->field_publisher[LANGUAGE_NONE] = array();
    $node->field_publisher[LANGUAGE_NONE][0]['value'] = $publisher;
    node_save($node);
    $message = t('Updating Publisher and Publisher Source fields: %title',
      array('%title' => $node->title)
    );
  }
  else {

  }
  //_cals_parse_record_details($node, $fields);


  //drupal_set_message($message);
}

/**
 * VBO form to update the filename used in the MARC XML generation.
 */
function _cals_importer_generate_marcxml_files_form($options) {
  $form = array();
  $filename = (is_numeric(arg(1)) && arg(0) == 'node') ? 'nnels_marcxml' . "_" . arg(1) . '.xml' : 'nnels_marcxml,xml';
  $form['filename'] = array(
    '#type' => 'textfield',
    '#title' => t('filename'),
    '#description' => t("Please provide a filename."),
    '#required' => TRUE,
    '#default_value' => $filename,
  );
  return $form;

}

function _cals_importer_generate_marcxml_files_submit($form, $form_state) {
  $return = array();
  $return['filename'] = $form_state['values']['filename'];
  return $return;
}


function _cals_importer_tab_checker_xmlstub() {
  global $user;
  if (user_access('view marcxml stub') && arg(0) == 'node') {
    $n = node_load(arg(1));
    RETURN ($n->type == 'repository_item') ? TRUE : FALSE;
  }
  return FALSE;
}
function _cals_importer_tab_checker_parse_record() {
  global $user;
  //todo - change to permission
  if (user_access('parse marc records') && arg(0) == 'node') {
    $n = node_load(arg(1));
    RETURN ($n->type == 'repository_item') ? TRUE : FALSE;
  }
  return FALSE;
}

function _cals_importer_tab_checker() {
  global $user;
  //todo - change to permission
  if (user_access('parse s3 paths') && arg(0) == 'node') {
    $n = node_load(arg(1));
    RETURN ($n->type == 'record_set') ? TRUE : FALSE;
  }
  return FALSE;
}

function _cals_importer_tab_checker_parse_s3_paths() {
  global $user;
  //todo - change to permission
  if (user_access('parse s3 paths') && arg(0) == 'node') {
    $n = node_load(arg(1));
    RETURN ($n->type == 's3_record_set') ? TRUE : FALSE;
  }
  return FALSE;

}


function cals_importer_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  //dpm($form_id);
  switch ($form_id) {
    case "editableviews_entity_form_marc_tag_crosswalkx":
      $fields = field_info_instances("node", "repository_item");
      $options = array("" => "--none--");
      foreach ($fields as $k => $v) {
        $type = $v['widget']['type'];
        $label = $v['label'];

        //printPre($type, $k, $label);
        $options[$k] = "$k ($label)";

      }
      asort($options);
      foreach ($options as $k => $v) {
        print $k . "|" . $v . "<br>";
      }
      printAndDie($options);

      //dpm($form['#field_handlers']['node']['field_field_name_drupal_editable']);
      foreach ($form['node'] as $nid => $arr) {

        //$options = $form['node'][$nid]['field_drupal_field_name']['und']['#options'];
        $form['node'][$nid]['field_drupal_field_name']['und']['#options'] = $options;

      }
      //dpm($form);
      break;

    case "field_collection_item_formx":
      //$form['#submit'][] =
      $form['nid'] = array('#type' => 'value', '#default_value' => 9724);
      $form['actions']['submit']['#submit'][] = '_cals_importer_s3_cors_field_submit';
      //dpm($form);

      break;
  }

}


function _cals_importer_s3_cors_field_submit($form, &$form_state) {
  $filepath = "NO";
  if ($form_state['values']['field_s3_to_cors_update'][LANGUAGE_NONE][0]['value'] == 1) {
    if (isset($form_state['values']['nid']) && !empty($form_state['values']['field_s3_path'])) {
      $node = node_load($form_state['values']['nid']);
      $filepath = $form_state['values']['field_s3_path'][LANGUAGE_NONE][0]['value'];
      $file = _cals_importer_file_updater($node, $filepath);
    }
    $form_state['values']['field_s3_file_upload'][LANGUAGE_NONE][0] = (array) $file;
  }

}


/**
 * Custom function to return node with duplicate S3 paths. Used in conjunction with
 * view: admin/content/cals/repo-items/multi-files/duplicate-s3-paths-refs
 */
function _cals_get_node_with_duplicate_s3($data) {
  if (!empty($data->field_data_field_s3_path_field_s3_path_value)) {
    $items = array();
    $rs = db_query(
      "SELECT entity_id as nid, field_s3_path_value as s3
      FROM field_data_field_s3_path
      where
      entity_id != :nid and field_s3_path_value = :s3 ",

      array(
        ":nid" => $data->nid,
        ":s3" => $data->field_data_field_s3_path_field_s3_path_value
      ));

    foreach ($rs as $row) {
      $n = node_load($row->nid);
      if ($n) {
        $items[] = l($n->title, "node/" . $n->nid);
      }
    }
    if (count($items)) {
      $vars = array(
        "items" => $items,
        "title" => '',
        "type" => 'ul',
        "attributes" => array('id' => 'nodes')
      );
      return theme_item_list($vars);
    }
  }
  return "NULL";
}


function _cals_importer_query_duplicate_titles($type) {

  $vals = array(0);
  $arr = array(
    "title" => array(
      "tbl" => "field_data_title_field",
      "field" => "title_field_value"
    ),
    "isbn" => array(
      "tbl" => "field_data_field_isbn",
      "field" => "field_isbn_value"
    ),
    "oclc" => array(
      "tbl" => "field_data_field_oclc_number",
      "field" => "field_oclc_number_value"
    ),
    "syscontrolnumber" => array(
      "tbl" => "field_data_field_system_control_number",
      "field" => "field_system_control_number_value"
    ),
  );
  if (array_key_exists($type, $arr)) {
    $field = $arr[$type]['field'];
    $tbl = $arr[$type]['tbl'];
    $rs = db_query("select entity_id as nid
      from {" . $tbl . "}
      where $field != '' and $field
      in (select $field
         from {" . $tbl . "}
         group by $field
         having count(*) > 1)
      order by $field");
    foreach ($rs as $row) {
      $vals[] = $row->nid;
    }

  }
  return $vals;

}

/**
 * Implements hook_views_post_execute().
 */
function cals_importer_views_post_execute(&$view) {
  $msg = FALSE;
  switch ($view->name) {
    case "repository_items_reparse_dates":
      //$view->current_display == 'embed_1'
      $msg = TRUE;
      foreach ($view->result as $k => $v) {
        //dpm($view->result[$k]->field_field_xml_string[0]['rendered']['#markup']);
        $dates = array();
        $node = node_load($v->nid);
        $xml = _cals_get_marc_xml_string($node);
        if(!$xml) {
          $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = "no xml";
          //dpm($xml);
        }
        else {
          //borrowed from _cals_get_date_issued_from_marc() in mappings.inc
          $tmp = $xml->xpath("//marc:controlfield[@tag='008']");
          if (count($tmp) >= 1) {
            $str = (string) $tmp[0];
            $str = substr($str, 7, 4); // 008/07-10 should be numeric
            if (is_numeric($str)) $dates['008'] = _cals_get_iso_year($str);
          }
          $arr = array(264 => 'c', 260 => 'c', 533 => 'd', 534 => 'c');
          foreach ($arr as $tag => $code) {
            $path = "//marc:datafield[@tag='{$tag}']/marc:subfield[@code='{$code}']";
            $tmp = $xml->xpath($path);
            if (count($tmp) >= 1) {
              $str = (string) $tmp[0];
              $dates[$tag] = $str;
            }
          }
          if(count($dates)) {
            $dd = array();
            foreach($dates as $tag => $date)  $dd[] = $tag . ": " . $date;
            $me = array("items" => $dd, "title" => '', "type" => "ul", "attributes" => array());
            $value = theme('item_list', $me);
          }
          else $value = "no dates";
          $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = $value;
        }
      }
      break;
    case "feld_collection_view_repo_files_admin_vbo":
      $msg = TRUE;
      foreach ($view->result as $k => $v) {

        $nid = $v->field_file_resource_field_collection_item_nid;
        $node = node_load($nid);
        $xml = _cals_get_marc_xml_string($node);


        if (!$xml) {
          $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = "no xml";
        }
        else {

        }
        $tag = 306;
        $path = "//marc:datafield[@tag='{$tag}']";
        $parent = $xml->xpath($path);
        $content = '';
        $tmp = array();
        $items = array();
        foreach ($parent as $i => $child) {
          //$ind = (string) $parent[$i]->attributes()->ind1;
          $title = array(); //holds the title elements for this child
          foreach ($child->children(NAME_SPACE)->subfield as $subfield) {
            $code = (string) $subfield->attributes()->code;
            $items[] = "$" . $code . " = " . (string) trim($subfield[0]);
          }
        }
        if (count($items)) {
          $variables = array(
            "title" => $path,
            "items" => $items,
            "type" => "ul",
            "attributes" => array(),
          );
          $html = theme("item_list", $variables);
        }
        else {
          $html = "no values found";
        }
        $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = $html;

      }
      break;

    case "repository_items_marcxml_output":
      $msg = TRUE;
      foreach ($view->result as $k => $v) {
        if(!isset($_REQUEST['field_xml_string_value_1'])) {
          $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = '';
        }
        else {
          $xmlstring = $_REQUEST['field_xml_string_value_1'];
          $tag = 0;
          $tagtype = '';
          if (preg_match('/"([0-9]{2,3})"/', $xmlstring, $m))
            $tag = $m[1];

          if(preg_match('/(datafield|controlfield)/', $xmlstring, $m))
            $tagtype = $m[1];

          $node = node_load($v->nid);
          $xml = _cals_get_marc_xml_string($node);
          if (!$xml) {
            $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = "no xml";
          }
          else {
            $path = "//marc:datafield[@tag='{$tag}']";
            $parent = $xml->xpath($path);
            $content = '';
            $tmp = array();
            $items = array();
            foreach ($parent as $i => $child) {
              //$ind = (string) $parent[$i]->attributes()->ind1;
              $title = array(); //holds the title elements for this child
              foreach ($child->children(NAME_SPACE)->subfield as $subfield) {
                $code = (string) $subfield->attributes()->code;
                $items[] = "$" . $code . " = " . (string) trim($subfield[0]);
              }
            }
            if (count($items)) {
              $variables = array(
                "title" => $path,
                "items" => $items,
                "type" => "ul",
                "attributes" => array(),
              );
              $html = theme("item_list", $variables);
            }
            else {
              $html = "no values found";
            }
            $view->result[$k]->field_field_xml_string[0]['rendered']['#markup'] = $html;
          }
        }
      }
      break;


  }
  if($msg)
    drupal_set_message(t("@view modified by: ", array("@view" => $view->name)) . __FUNCTION__);

}

/**
 * Implements hook_views_query_alter().
 */
function cals_importer_views_query_alter(&$view, &$query) {
  $msg = FALSE;

  switch ($view->name . ":" . $view->current_display) {

    //lets find upper case creators; need to use BINARY operator
    case "cals_creators:page_1":
      $msg = TRUE;

      $query->where[1]['conditions'][0]['value'] = "^[A-Z][A-Z]";
      $query->where[1]['conditions'][0]['operator'] = "rlike BINARY";

      break;

    //system control number duplicates
    case "repository_items_duplicates:page_1":
      $msg = TRUE;
      //custom query to find duplicate system control numbers
      $vals = array();
      $rs = db_query("select nid, title
        from {node} n
        where title != '' and title
        in (select title
           from {node}
           group by title
           having count(*) > 1)
        order by title");
      foreach ($rs as $row) {
        $vals[] = $row->nid;
      }
      $vals = _cals_importer_query_duplicate_titles("title");
      $query->where[1]['conditions'][] = array(
        "field" => "node.nid",
        "value" => $vals,
        "operator" => "in",
      );
      break;

    //isbn duplicates
    case "repository_items_duplicates:page_2":
      $msg = TRUE;
      $vals = _cals_importer_query_duplicate_titles("isbn");
      $query->where[1]['conditions'][1] = array(
        "field" => "node.nid",
        "value" => $vals,
        "operator" => "in",
      );
      break;
    //isbn duplicates
    case "repository_items_duplicates:page_3":
      $msg = TRUE;
      $vals = _cals_importer_query_duplicate_titles("oclc");
      $query->where[1]['conditions'][1] = array(
        "field" => "node.nid",
        "value" => $vals,
        "operator" => "in",
      );
      break;

    //custom query to find duplicate system control numbers
    case "repository_items_duplicates:page_8":
    case "repository_item_admin_views:page_8":
      $msg = TRUE;
      $vals = _cals_importer_query_duplicate_titles("syscontrolnumber");
      $query->where[1]['conditions'][1] = array(
        "field" => "node.nid",
        "value" => $vals,
        "operator" => "in",
      );

      break;

  }

  switch ($view->name) {

    case "repository_items_with_field_collections":

      if ($view->current_display == 'page_2' || $view->current_display == 'page_4') {
        $msg = TRUE;
        $sql =
          "SELECT entity_id as nid, field_s3_path_value as s3, COUNT( field_s3_path_value )
          FROM field_data_field_s3_path
          GROUP BY field_s3_path_value
          HAVING (COUNT( field_s3_path_value ) > 1)";
        $rs = db_query($sql);
        foreach ($rs as $row) {
          $arr[] = $row->s3;
        }
        $query->where[1]['conditions'][2] = array(
          'field' => "field_data_field_s3_path.field_s3_path_value",
          'value' => $arr, //array($subq),
          'operator' => 'in',
        );
      }
      break;

    case "repository_items_deduplicate2":
    case "repo_items_bulk_deduper":
      if ($view->current_display == 'page') {
        $msg = TRUE;

        $sql =
          "SELECT field_data_field_system_control_number.field_system_control_number_value as val " .
          "FROM field_data_field_system_control_number " .
          "GROUP BY field_system_control_number_value " .
          "HAVING COUNT(*) > 1 " .
          "ORDER BY field_system_control_number_value";
        $rs = db_query($sql);
        foreach ($rs as $row) {
          $arr[] = $row->val;
        }
        $query->where[1]['conditions'][2] = array(
          'field' => "field_data_field_system_control_number.field_system_control_number_value",
          'value' => $arr, //array($subq),
          'operator' => 'in',
        );
      }
      break;


    case "organizations_vbo":
      if ($view->current_display == 'page_2') {
        //custom query to find duplicate system control numbers
        $vals = array();
        $rs = db_query("select entity_id, field_library_code_value
          from {field_data_field_library_code}
          where field_library_code_value

          in (select field_library_code_value
             from {field_data_field_library_code}
             group by field_library_code_value
             having count(*) > 1)
          order by field_library_code_value");
        foreach ($rs as $row) {
          $vals[] = $row->entity_id;
        }

        $query->where[1]['conditions'][1] = array(
          "field" => "node.nid",
          "value" => $vals,
          "operator" => "in",
        );

      }

      break;
    case "feld_collection_view_repo_files_admin_vbo":
      $msg = TRUE;
      /*
       *
       *
SELECT f1.entity_id FROM `field_data_field_s3_path` f1
inner join field_data_field_s3_path f2
on f1.field_s3_path_value = f2.field_s3_path_value
where f1.bundle = 'field_file_resource' and f2.bundle = 'repository_item'

      146 seconds

SELECT distinct(entity_id) as id
FROM `field_data_field_s3_path`
where field_s3_path_value in (select field_s3_path_value from field_data_field_s3_path where bundle = 'repository_item')


      inner joi
 $rs = db_query(
        "SELECT entity_id as nid FROM {field_data_field_s3_path} WHERE bundle =  :b ", array(':b' => 'repository_item') )->fetchCol();

*/
      $rs = db_query(
        "SELECT f1.entity_id as nid FROM  {field_data_field_s3_path} f1 INNER JOIN {field_data_field_s3_path} f2
ON f1.field_s3_path_value = f2.field_s3_path_value
WHERE f1.bundle =  :b1 AND  f2.bundle = :b2 ", array(":b1" => 'repository_item', ":b2" => 'repository_item')
      )->fetchCol();

     //printAndDie($rs);

//      $sub_query = db_select('foo', 'f')
//        ->fields('f', array('nid'))
//        ->condition('f.bar', 'baz');
      $view->query->add_where(0, 'field_file_resource_field_collection_item.nid', $rs, 'IN');
//
//      $query->where[1]['conditions'][2]['value'] = $rs;
//      $query->where[1]['conditions'][2]['operator'] = "IN";

      //dpm($query->where);


      break;
    case "repository_items_publisher_listing":
      /**  formats
      1|DAISY 202 - Full Text and Audio
      2|DAISY 3 - Full Text and Audio
      3|Braille
      4|MP3
      5|DOC
      6|PDF
      7|EPUB 2
      8|EPUB 3
      9|AZW3
      10|EPUB 3 - Full Text and Audio
      11|DAISY 202 - Audio
      12|DAISY 202 - Full Text
      13|DAISY 3 - Audio
      14|DAISY 3 - Full Text
      15|RTF
       **/

      $msg = TRUE;

      //see: https://github.com/BCLibCoop/nnels/issues/103
      //@todo update this if still in use
      $arr = array(
        "page" => array(1, 2, 4, 5, 3), //no e-text, no braille
        "page_1" => array(1, 2, 4, 3), //no braille but includes e-text
        "page_2" => array(1, 2, 4, 5), //no e-text, but includes braille

      );
      $excludes = $arr[$view->current_display];
      $subq = db_select('field_data_field_file_resource', 'fr');
      $subq->join('field_collection_item', 'fci', 'fr.field_file_resource_value = fci.item_id');
      $subq->join('field_data_field_file_format', 'ff', 'fci.item_id = ff.entity_id and ff.field_file_format_value in (:type)',
        array(":type" => $excludes));
      $subq->addField('fr', 'entity_id', 'nid');

      $query->where[1]['conditions'][] = array(
        "field" => "node.nid",
        "value" => $subq,
        "operator" => "NOT IN",
      );


      break;
  }//end switch
  if($msg) drupal_set_message("NB: this view is overwritten in " . __FUNCTION__);

}

/**
 * import / create skeletal marc records, i.e., just the title
 *
 * @param $node
 *   the node passed to the parser
 */

function cals_importer_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case "record_set":
      if ($view_mode == 'full' && (user_access("generate repo records") || user_access("parse marc records"))) {
        $label = t("Generate new stub Repository Records");
        if (count($node->field_parsed_nodes)) {
          $label = t("Update existing Repository Records (titles + S3 paths)");
        }
        $node->content['additional-text'] = array(
          '#markup' => l($label, "node/{$node->nid}/parse-marcxml-new", array("attributes" => array("class" => "generate-stub"))),
          '#weight' => 10,
        );
        $node->content['additional-text'] = array(
          '#markup' =>
            l(t("Preview titles in collection"), "node/{$node->nid}/preview-titles", array("attributes" => array("class" => "generate-stub"))) . ' ' .
            l($label, "node/{$node->nid}/parse-marcxml-new2", array("attributes" => array("class" => "generate-stub"))),
          '#weight' => 10,
        );
        $view = views_embed_view("repository_item_by_recordsets", "embed_1", $node->nid);
        $node->content['view-repo-items'] = array(
          '#markup' => $view,
          '#weight' => 20,
        );
      }
      break;

  }
}
/**
 * Implements hook_custom_theme()
 * Switch theme for a mobile browser
 * @return string The theme to use
 */
function cals_importer_custom_theme()  {
  $path = current_path();
  $path_alias = drupal_lookup_path('alias',$path);
  //printAndDie($path_alias, $path);
  if(arg(0) == 'node' && is_numeric(arg(1)) && substr($path_alias, 0, 6) == 'admin/' ) {
    //dpm($_REQUEST);
    $theme = 'adminimal'; // core theme, used as fallback
    return $theme;
  }

}
/**
 * initializes new item repos node
 *
 * @return $node
 *   the new skeletal node passed to the parser
 */
function _cals_prepare_new_item_repos() {

  $node = new StdClass();
  $node->type = 'repository_item';
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);
  return $node;
}

/**
 * import / create skeletal marc records, i.e., just the title
 *
 * @param $node
 *   the node passed to the parser
 */
function _cals_import_skeletal_records($node) {
  $max = 50; //clear buffer, etc.
  ini_set('memory_limit', '1024M');
  ini_set('max_execution_time', '600');
  global $user;
  //module_load_include('inc', 'entity', 'includes/entity.controller');
  foreach (taxonomy_get_vocabularies() as $k => $v) {
    $arr_tax[$v->name] = $k;
  }

  $arr_s3 = array();
  if (!empty($node->field_file_csv)) {
    $file_s3 = drupal_realpath($node->field_file_csv[LANGUAGE_NONE][0]['uri']);
    $arr_s3 = _cals_get_array_csv_by_file($file_s3);

  }

  $file = drupal_realpath($node->field_marc_xml_file[LANGUAGE_NONE][0]['uri']); // FILE_FOLDER . ;
  //to track errors
  libxml_use_internal_errors(TRUE);
  //load file
  $xml = simplexml_load_file($file);
  if ($xml === FALSE) {
    drupal_set_message(t("Oops, could not parse the file. Might not be valid xml?"), "error");
    foreach (libxml_get_errors() as $error) {
      drupal_set_message($error->message, "error");
    }
    drupal_goto("node/" . $node->nid);
  }

  $num = 0;
  $parsed = array();//track some details re. the parsing

  foreach ($xml->children(NAME_SPACE) as $record) {
    $arr = _cals_get_title_from_xml($record);
    $result = '';

    if (!isset($arr['repos']['title']) || strlen($arr['repos']['title']) == 0) {
      return "Oops, there's a missing title in this record set!";
    }
    $new_record = TRUE;
    if (isset($node->field_parsed_nodes[LANGUAGE_NONE][$num])) {
      $new_record = FALSE;
      $n = node_load($node->field_parsed_nodes[LANGUAGE_NONE][$num]['nid']);
      //added just in case the node reference field is not cleared.
      if (!isset($n->type) || $n - type != "repository_item") {
        //prepare new node
        $n = _cals_prepare_new_item_repos();
        $result .= "Skeletal record added. ";
      }
      else {
        $n->changed = time();
        $result .= "Skeletal record updated. ";
      }


    }
    else {
      //prepare new node
      $n = _cals_prepare_new_item_repos();
      $result .= "Skeletal record added. ";
      // Get the term's ID.

    }

    //we'll add string to xml field.
    $arr['xml_record'] = $record->saveXML();

    if ($num < 10000) {
      //if ($new_record || $n->title != $arr['repos']['title'] || empty($n->field_xml_string)) {
      $n->status = 0;
      $n->title = $arr['repos']['title'];

      $n->field_xml_string[LANGUAGE_NONE][]['value'] = $arr['xml_record'];

      if (count($arr_s3)) {
        if (isset($arr['repos']['field_system_control_number'][0])) {
          $tmp = $arr['repos']['field_system_control_number'][0];
          if (array_key_exists($tmp, $arr_s3)) {
            $n->field_s3_path[LANGUAGE_NONE] = array();
            $n->field_s3_path[LANGUAGE_NONE][0]['value'] = $arr_s3[$tmp];
            $result .= "added s3 path.";
          }
        }
      }
      //save the new/existing repository item node
      $n->field_record_set[LANGUAGE_NONE][0]['nid'] = $node->nid;
      //set access restrictions on the node to match the record-set
      $n->field_access_restrictions[LANGUAGE_NONE][0]['value'] = $node->field_access_restrictions[LANGUAGE_NONE][0]['value'];
      node_save($n);
      $result = l(t("edit"), "node/" . $n->nid . "/edit") . " | " . l(t("view"), "node/" . $n->nid) . " - {$n->title}"
        . " " . $result;

      //}
      //$node->field_parsed_nodes[LANGUAGE_NONE][$num]['nid'] = $n->nid;

    }
    //save every 50 items
    //if (($num % $max) == 0) node_save($node);

    $parsed[] = $result;
    $num++;
  }
  $node->field_status[LANGUAGE_NONE][0]['value'] = 2;

  //save one last time.
  node_save($node);

  $vars = array(
    "items" => $parsed,
    "title" => "parsed list: {$num} records",
    "type" => "ol",
    "attributes" => array()
  );
  $vars = theme_item_list($vars);
  drupal_set_message(filter_xss($vars, $allowed_tags = array(
    'a',
    'em',
    'strong',
    'cite',
    'blockquote',
    'code',
    'ul',
    'ol',
    'li',
    'dl',
    'dt',
    'dd'
  )));
  drupal_goto("node/" . $node->nid);

}


/**
 * fixes single node oclc number.
 *
 * @param $node
 *   the node passed to the parser
 */
function _cals_importer_update_oclc_numbers_single_node($node) {

  printAndDie($node);
  _cals_importer_update_oclc_numbers_query($node);
  drupal_goto("node/" . $node->nid);

}

/**
 * move OCoLC into proper field
 */
function _cals_importer_fix_oclc_numbers_batch(&$entity, $context = array()) {
  if (isset($entity->nid)) {
    $node = node_load($entity->nid);
    //safety check to make sure we're parsing repos items!!
    $content_types = array('repository_item');
    if (in_array($node->type, $content_types)) {
      _cals_importer_update_oclc_numbers_query($node);
      drupal_set_message(t('OCLC Number updated for ') . l($node->title, "node/" . $node->nid . "/edit"));

    }
    else {
      drupal_set_message(t("Invalid selection: not a repos item"));
    }

  }//end main if

  return "";

}

function _cals_importer_update_oclc_numbers_query($node) {

  $vals = $node->field_system_control_number[LANGUAGE_NONE];
  //reset sys control number
  $node->field_system_control_number[LANGUAGE_NONE] = array();
  foreach ($vals as $value) {
    $val = $value['value'];
    if (strpos($val, "(OCoLC)") !== FALSE) {
      if (_cals_isvalid_oclc_number($val) === 1) {
        $node->field_oclc_number[LANGUAGE_NONE][]['value'] = $val;
      }
    }
    else { //repopulate the sys control numbers
      $node->field_system_control_number[LANGUAGE_NONE][]['value'] = $val;
    }

  }
  _cals_delete_duplicate_oclc_numbers($node);
  node_save($node);
}


/**
 * checks validity of oclc number
 *
 * @param $string
 *   the string value passed to the function
 * @return integer
 *   returns 1 if true; 0 if false
 */
function _cals_isvalid_oclc_number($string) {
  $value = trim(str_replace("(OCoLC)", "", $string));
  $is_valid = 0;
  return (ctype_digit($value) !== FALSE || is_int($value) !== FALSE) ? 1 : 0;
}

/**
 * loops thru oclc_number values to strip out duplicates
 *
 * @param $node
 *   the node, passed by reference
 */

function _cals_delete_duplicate_oclc_numbers(&$node) {
  if (!empty($node->field_oclc_number)) {
    $arr = array();
    foreach ($node->field_oclc_number[LANGUAGE_NONE] as $k => $v) {
      if (!in_array($v['value'], $arr)) {
        $arr[] = $v['value'];
      }
    }
    $node->field_oclc_number[LANGUAGE_NONE] = array();
    //if multiple oclc numbers, throw an error message
    if (count($arr) > 1) {
      drupal_set_message(t("There are multiple OCLC numbers. Please check entry: ") .
        l($node->title, "node/" . $node->nid . "/edit"));
    }
    foreach ($arr as $val) {
      $node->field_oclc_number[LANGUAGE_NONE][] = array("value" => $val);
    }
  }
}


/**
 * update / add system control numbers
 */
function _cals_importer_update_system_control_numbers(&$entity, $context = array()) {
  if (isset($entity->nid)) {
    $node = node_load($entity->nid);
    //safety check to make sure we're parsing repos items!!
    $content_types = array('repository_item');
    if (in_array($node->type, $content_types)) {
      _cals_parse_system_control_number($node);
      drupal_set_message(t('%string System Control Numbers updated', array('%string' => $node->title)));
    }
    else {
      drupal_set_message(t("Invalid selection: not a repos item"));
    }

  }//end main if

  return "";

}

/**
 * load node, pull out system control numbers, save node
 */

function _cals_parse_system_control_number($node) {
  $xml = _cals_get_marc_xml_string($node);
  if ($xml === 0) return;
  $tmp = $xml->xpath("//marc:datafield[@tag='035']/marc:subfield[@code='a']");
  unset($node->field_system_control_number);
  if (count($tmp)) {
    foreach ($tmp as $me) {
      $val = (string) $me;
      $node->field_system_control_number[LANGUAGE_NONE][]['value'] = $val;
      drupal_set_message(t('%string System Control Numbers updated', array('%string' => $node->title)));
    }
  }
  else {
    $node->field_system_control_number[LANGUAGE_NONE][0]['value'] = 0;
    drupal_set_message(t('%string System Control Numbers updated', array('%string' => $node->title)));
  }
  node_save($node);
  return '';
}


/**
 * update Access Restrictions, i.e., 506 field
 *
 * @param $entity
 * @param array $context
 * @return string
 */
function _cals_importer_update_licensed_access(&$entity, $context = array()) {
  if (isset($entity->nid)) {
    $node = node_load($entity->nid);
    //safety check to make sure we're parsing repos items!!
    $content_types = array('repository_item');
    if (in_array($node->type, $content_types)) {
      _cals_parse_licensed_access($node);
    }
    else {
      drupal_set_message(t("Invalid selection: not a repos item"));
    }
  }//end main if
  return "";
}


/**
 * load node, pull out "restrictions". Separating it this way allows us to also include
 * this as part of the node/%node/parse-rights-access pattern.
 *
 * @param $node
 * @return string|void
 * @throws \Exception
 */
function _cals_parse_licensed_access($node) {
  $xml = _cals_get_marc_xml_string($node);
  if ($xml === 0) return;
//  $str = 'xyz';//placeholder string
//  $tmp = $xml->xpath("//marc:datafield[@tag='506']/marc:subfield[@code='a']");
//  if (!count($tmp)) {
//    drupal_set_message(t('%string  Access Restriction not updated (no 506 element).'), array('%string' => $node->title));
//    return '';
//  }
//  $str = (string) $tmp[0];
//  $tmp = strpos(strtolower($str), "restricted");
//  $node->field_access_restrictions[LANGUAGE_NONE][0]['value'] = (is_numeric($tmp)) ? 1 : 0;

  //Default Requires Login see: https://github.com/BCLibCoop/nnels/issues/187
  $node->field_access_restrictions[LANGUAGE_NONE][0]['value'] = 1;

  node_save($node);
  drupal_set_message(t('%string  Access Restriction updated.'), array('%string' => $node->title));
  return '';

}


/**
 * grabs the title from the record
 *
 * @param $record
 *   the record passed to the parser
 * @return array
 */
function _cals_get_title_from_xml($record) {
  $arr = array();
  //loop thru datafields
  $arr['repos']['title'] = '';
  foreach ($record->children(NAME_SPACE)->datafield as $datafield) {
    $tag = (string) $datafield->attributes()->tag;
    $ind1 = (string) $datafield->attributes()->ind1;
    $ind2 = (string) $datafield->attributes()->ind2;
    foreach ($datafield as $subfield) {
      $code = (string) $subfield->attributes()->code;
      $str = trim((string) $subfield);
      $str = trim($str);

      switch ($tag) {
        case 245:
          if ($code == 'a') {
            $arr['repos']['title'] = $str;
          }
          if ($code == 'b') {
            $arr['repos']['title'] .= " " . $str;
          }
          $arr['repos']['title'] = _cals_get_truncated_value($arr['repos']['title'], 250);
          break;

        case "035":
          if ($code == 'a') {
            if (strpos($str, "(OCoLC)") !== FALSE) {
              $arr['repos']["field_oclc_number"][] = $str;
            }
            else {
              $arr['repos']["field_system_control_number"][] = $str;
            }
          }
          break;
      }
    }
  }
  return $arr;

}

/**
 * @param $arr
 *   the value (array) returned by
 *
 * @return
 *   $val, a string
 */
function _cals_importer_get_string($arr) {
  $val = (string) $arr[0];
  return htmlspecialchars(trim($val));
}
