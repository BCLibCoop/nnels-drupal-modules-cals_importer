<?php

/**
 * set memory limit and max execution times to higher than normal!
 */
//ini_set('memory_limit', '512M');
//ini_set('max_execution_time', '600'); 

//the MARC namespace
define("NAME_SPACE", "http://www.loc.gov/MARC21/slim");

//require these files...
require_once(drupal_get_path('module', "cals_importer") . "/cals_importer.misc.inc");
require_once(drupal_get_path('module', "cals_importer") . "/cals_importer.mappings.inc");
require_once(drupal_get_path('module', "cals_importer") . "/cals_importer.marcxml.inc");
require_once(drupal_get_path('module', "cals_importer") . "/cals_importer.s3paths.inc");
require_once(drupal_get_path('module', "cals_importer") . "/cals_importer.clean_up.inc");
require_once(drupal_get_path('module', "cals_importer") . "/cals_importer.deduper.inc");


module_load_include('inc', 'entity', 'includes/entity.controller');

/**
 * Implements hook_menu().
 */
  
function cals_importer_menu() {
  $items = array();


  /**
   * Parses S3 sets, can be invoked directly - e.g:
   * http://me/cals_staging/admin/content/cals/batch-update-s3-paths/5429
   *
   * See: content/cals/s3-record-sets
   * 
   */

  $items['admin/content/cals/batch-update-s3-paths'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_batch_update_s3_paths',
    'title' => t('Update S3 Paths'),
    'page arguments' => array(4),  
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 100,
  );

  $items['admin/content/cals/parse-org-emails'] = array(
    'title' => t('Update Organizational Contact Emails from CSV file'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cals_org_emails_import_form'),
    'file' => 'cals_importer.orgs.inc',
  );
  
  $items['admin/content/cals/test-load-org-emails-csv'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_get_array_org_emails',
    'title' => t("Test Load CSV file"),
    'type' => MENU_CALLBACK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
    'file' => 'cals_importer.orgs.inc',
  
  );

  $items['node/%node/parse-marcxml-new'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_import_skeletal_records',
    'title' => t("Generate / Update Stub Entries"),
    'type' => MENU_CALLBACK,
    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'access arguments' => array('parse s3 paths'),
  
  );

  $items['node/%node/parse-record'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_update_repository_item',
    'title' => t('Parse MARC/XML'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
    'file' => "cals_importer.marcxml.inc",
  
  );

  $items['node/%node/clean-author'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_clean_up_creator',
    'file' => "cals_importer.clean_up.inc",
    'title' => t('Scrub Author'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 150,
  
  );
  
  $items['node/%node/normalize-publisher'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_normalize_publisher',
    'file' => "cals_importer.clean_up.inc",
    'title' => t('Scrub Publisher'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 150,
  
  );


  $items['node/%node/normalize-title'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_normalize_title',
    'file' => "cals_importer.clean_up.inc",
    'title' => t('Scrub Title'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 150,
  
  );


  $items['node/%node/generate-marc-856'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_add_856_tag',
    'file' => "cals_importer.clean_up.inc",
    'title' => t('Generate MARC 856'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 150,
  
  );

  /*
  $items['node/%node/parse-access-rights'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_parse_licensed_access',
    'title' => t('Parse 506 (access)'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
  
  );  


   */   
  
  /*

  $items['admin/content/cals/update-isbn-length'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_increase_field_size',
    'title' => t('Update ISBN Field Size (admin only)'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cals_importer.misc.inc',
    'weight' => 100,
  
  );  
    
   */   
  
  //to deprecate next round of development?
  
  /*
  $items['node/%node/parse-sys-control-num'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_importer_update_system_control_numbers',
    'title' => 'Parse System Control Number',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
  
  );

  $items['node/%node/parse-s3-path'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => '_cals_update_s3_path',
    'title' => 'Parse S3 Path',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'weight' => 100,
  
  );
  */
  
  return $items; 

}
/**
 * Implements hook_permission().
 */
function cals_importer_permission() {
  return array(
    'dedupe records' => array(
      'title' => t('Dedupe Repo Items'),
      'description' => t('Dedupe Repo Items.'),
    ),
   'parse s3 paths' => array(
      'title' => t('Parse S3 paths'),
      'description' => t('Parse S3 Paths.'),
    ),
    'parse marc records' => array(
      'title' => t('Parse MARC records'),
    ),
    'generate repo records' => array(
      'title' => t('Generate New Repository Items'),
    ),
    'parse 506' => array(
      'title' => t('Parse / Update 506 entries'),
      'description' => t(''),
    ),
  );
}
/**
 * Implements action_info().
 */
function cals_importer_action_info() {
  return array(
    //the main MARC XML parser
    '_cals_importer_update_repository_items' => array(
      'label' => t('Parse MARC XML'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    
    //bulk update to generate marc xml strings w/ 856 tag
    '_cals_importer_generate_marc_xml_856' => array(
      'label' => t('CALS: Generate MARC with 856 strings'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    
    //batch update to just the system control numbers
    '_cals_importer_update_system_control_numbers' => array(
      'label' => t('Update System Control Numbers'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update to adjust/update the 506 access rights permissions
    '_cals_importer_update_licensed_access' => array(
      'label' => t('Update Access Restrictions'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update to update org email fields based on J. Schatz's CVS file
    '_cals_update_org_emails' => array(
      'label' => t('Update Organization Emails'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
      'file' => 'cals_importer.orgs.inc',
    ),

    //batch update title field, stripping out trailing slashes, etc.
    '_cals_normalize_titles' => array(
      'label' => t('CALS: Normalize titles'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch update creator field, stripping out trailing periods, commas, etc.
    '_cals_clean_up_creators' => array(
      'label' => t('CALS: Normalize authors / creators'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
      //'file' => 'cals_importer.clean_up.inc',
    ),

    //batch update creator field, stripping out trailing periods, commas, etc.
    '_cals_normalize_publishers' => array(
      'label' => t('CALS: Normalize publishers'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),

    //batch dedupe marc xml records
    '_cals_dedupe_035' => array(
      'label' => t('CALS: Dedupe on 035 matches'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    //batch dedupe org nodes based on ill code (field_library_code)
    '_cals_dedupe_orgs_by_illcode' => array(
      'label' => t('CALS: Dedupe orgs based on ILL Code matches'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),

  );
}


/**
 * Implementation of hook_menu_alter().
 * Remember to clear the menu cache after adding/editing this function.
 */
function cals_importer_menu_alter(&$items) {
  // Removing certain local navigation tabs that are either undesired or need to be custom relocated.
  // Set these tabs to MENU_CALLBACK, so they still register the path, but just don't show the tab:
  $items['node/%node/parse-access-rights']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/parse-record']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/parse-marcxml-new']['access callback'] = '_cals_importer_tab_checker';
  $items['node/%node/normalize-publisher']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/normalize-title']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/clean-author']['access callback'] = '_cals_importer_tab_checker_parse_record';
  $items['node/%node/generate-marc-856']['access callback'] = '_cals_importer_tab_checker_parse_record';

}
function _cals_importer_tab_checker_parse_record() {
  global $user;
  //todo - change to permission
  if( user_access('parse marc records') && arg(0) == 'node') {
    $n = node_load(arg(1));
    RETURN ($n->type == 'repository_item') ? TRUE : FALSE;
  }
  return FALSE;
}

function _cals_importer_tab_checker() {
  global $user;
  //todo - change to permission
  if( user_access('parse s3 paths') && arg(0) == 'node') {
    $n = node_load(arg(1));
    RETURN ($n->type == 'record_set') ? TRUE : FALSE;
  }
  return FALSE;
}
/**
 * Implements hook_views_query_alter().
 */
function cals_importer_views_query_alter(&$view, &$query) {

  switch($view->name) {
    case "repository_items_deduplicate2":
    case "repo_items_bulk_deduper":
      if($view->current_display == 'page') {
        $sql = 
        "SELECT field_data_field_system_control_number.field_system_control_number_value as val " .
          "FROM field_data_field_system_control_number " .
          "GROUP BY field_system_control_number_value " .
          "HAVING COUNT(*) > 1 " .
          "ORDER BY field_system_control_number_value";
        $rs = db_query($sql);
        foreach ($rs as $row) {
          $arr[] = $row->val;
        }
        $query->where[1]['conditions'][2] = array(
           'field' => "field_data_field_system_control_number.field_system_control_number_value",
           'value' => $arr, //array($subq),
           'operator' => 'in', 
          );
      }
      break;
  
    case "repository_item_admin_views":
      if($view->current_display == 'page_8') {
        //custom query to find duplicate system control numbers  
        $vals = array();
        $rs = db_query("select entity_id, field_system_control_number_value
          from {field_data_field_system_control_number} 
          where field_system_control_number_value
          
          in (select field_system_control_number_value 
             from {field_data_field_system_control_number}
             group by field_system_control_number_value
             having count(*) > 1)
          order by field_system_control_number_value");
        foreach($rs as $row) {
          $vals[] = $row->entity_id;
        }
    
        $query->where[1]['conditions'][1] = array(
              "field" => "node.nid",
              "value" => $vals,
              "operator" => "in",
        );      
        
      }
    
      break;
      
    case "organizations_vbo":
      if($view->current_display == 'page_2') {
        //custom query to find duplicate system control numbers  
        $vals = array();
        $rs = db_query("select entity_id, field_library_code_value
          from {field_data_field_library_code} 
          where field_library_code_value
          
          in (select field_library_code_value 
             from {field_data_field_library_code}
             group by field_library_code_value
             having count(*) > 1)
          order by field_library_code_value");
        foreach($rs as $row) {
          $vals[] = $row->entity_id;
        }
    
        $query->where[1]['conditions'][1] = array(
              "field" => "node.nid",
              "value" => $vals,
              "operator" => "in",
        );      
        
      }
    
      break;  
  
  }//end switch


} 

/**
 * import / create skeletal marc records, i.e., just the title
 *
 * @param $node
 *   the node passed to the parser
 */

function cals_importer_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case "record_set":
     
      if(user_access("generate repo records") || user_access("parse marc records") ) {

        $label = t("Generate new stub Repository Records");
        if(count($node->field_parsed_nodes[LANGUAGE_NONE])) {
          $label = t("Update existing Repository Records (titles + S3 paths)");
        }
        $node->content['additional-text'] = array(
          '#markup' => l($label, "node/{$node->nid}/parse-marcxml-new"), '#weight' => 10, 
        );
      }
      break;


  }
}

/**
 * initializes new item repos node
 *
 * @return $node
 *   the new skeletal node passed to the parser
 */
function _cals_prepare_new_item_repos() {

  new StdClass();
  $node->type = 'repository_item';
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);
  return $node;
}

/**
 * import / create skeletal marc records, i.e., just the title
 *
 * @param $node
 *   the node passed to the parser
 */
function _cals_import_skeletal_records($node) {
  $max = 50; //clear buffer, etc.
  
  global $user;
  //module_load_include('inc', 'entity', 'includes/entity.controller');
  foreach(taxonomy_get_vocabularies() as $k => $v) {
    $arr_tax[$v->name] = $k;
  } 

	$arr_s3 = array();
	if(!empty($node->field_file_csv)) {
		$file_s3 = drupal_realpath($node->field_file_csv[LANGUAGE_NONE][0]['uri']); 
   	$arr_s3 = _cals_get_array_csv_by_file($file_s3);
  
  }
  
  $file = drupal_realpath($node->field_marc_xml_file[LANGUAGE_NONE][0]['uri']); // FILE_FOLDER . ;
  //to track errors
  libxml_use_internal_errors(true);
  //load file
  $xml = simplexml_load_file($file);
  

  if($xml===FALSE) {
    drupal_set_message("oops, could not parse the file. Might not be valid xml?", "error");
     foreach(libxml_get_errors() as $error) {
        drupal_set_message($error->message, "error");
    }
    drupal_goto("node/" . $node->nid);
  } 
  
  $num = 0;
  $parsed = array();//track some details re. the parsing
  
  foreach($xml->children(NAME_SPACE) as $record) {
    $arr = _cals_get_title_from_xml($record);
    $result = '';
    
    if(!isset($arr['repos']['title']) || strlen($arr['repos']['title']) == 0) return "Oops, there's a missing title in this record set!";
      $new_record = TRUE;
      if(isset($node->field_parsed_nodes[LANGUAGE_NONE][$num]) ) {
        $new_record = FALSE;
        $n = node_load($node->field_parsed_nodes[LANGUAGE_NONE][$num]['nid']);
        //added just in case the node reference field is not cleared.
        if(!isset($n->type) || $n-type != "repository_item") {
          //prepare new node
          $n = _cals_prepare_new_item_repos();
          $result .= "Skeletal record added. ";

        }
        else {
          $n->changed = time();
          $result .= "Skeletal record updated. ";
        }
        
                
      }
      else {
        //prepare new node
        $n = _cals_prepare_new_item_repos();
        $result .= "Skeletal record added. ";
        // Get the term's ID.

      }

      //we'll add string to xml field.
      $arr['xml_record'] = $record->saveXML();

      if($num < 10000) {
        //if($new_record || $n->title != $arr['repos']['title'] || empty($n->field_xml_string)) {
          $n->status = 0;
          $n->title = $arr['repos']['title'];
          
          $n->field_xml_string[LANGUAGE_NONE][]['value'] = $arr['xml_record'];
  
          if(count($arr_s3)) {
            if(isset($arr['repos']['field_system_control_number'][0])) {
              $tmp = $arr['repos']['field_system_control_number'][0];
              if (array_key_exists($tmp, $arr_s3)) {
                $n->field_s3_path[LANGUAGE_NONE] = array();
                $n->field_s3_path[LANGUAGE_NONE][0]['value'] = $arr_s3[$tmp];
                $result .= "added s3 path.";
              }
              
            }
          
          }
          //save the new/existing repository item node  
          $n->field_record_set[LANGUAGE_NONE][0]['nid'] = $node->nid;
				  $n->field_access_restrictions[LANGUAGE_NONE][0]['value'] = $node->field_access_restrictions[LANGUAGE_NONE][0]['value'];
				  
          node_save($n);

          $result  = l("edit", "node/" . $n->nid . "/edit" ) . " | " . l("view", "node/" . $n->nid) . " - {$n->title}" 
            . " " . $result;  
          
        //} 
        //$node->field_parsed_nodes[LANGUAGE_NONE][$num]['nid'] = $n->nid;
        
      } 
      //save every 50 items
      //if (($num % $max) == 0) node_save($node);
    
    $parsed[] = $result;
    $num++;
  }
  $node->field_status[LANGUAGE_NONE][0]['value'] = 2;
  
  //save one last time.
  node_save($node);

  $vars = array("items" => $parsed, "title" => "parsed list: {$num} records", "type" => "ol", "attributes" => array());
    
  drupal_set_message(theme_item_list($vars));
  drupal_goto("node/" . $node->nid);

}  


/**
 * update / add system control numbers
 */
function _cals_importer_update_system_control_numbers(&$entity, $context = array()) {
  if (isset($entity->nid)) {
    $node = node_load($entity->nid);
    //safety check to make sure we're parsing repos items!!    
    $content_types = array('repository_item');
    if (in_array($node->type, $content_types)  ) {
      _cals_parse_system_control_number($node);
      drupal_set_message("{$node->title} System Control Numbers updated.");
    }
    else{
      drupal_set_message("Invalid selection: not a repos item");
    }

  }//end main if
 
  return "";
  
}

/**
 * load node, pull out system control numbers, save node 
 */

function _cals_parse_system_control_number($node) {


  if(!isset($node->field_xml_string[LANGUAGE_NONE]) ) return ''; //get out of here if not xml string
  if(isset($node->field_xml_string[LANGUAGE_NONE])) 
    $xml = _cals_get_xml_string($node->field_xml_string[LANGUAGE_NONE][0]['value']);

  $tmp = $xml->xpath("//marc:datafield[@tag='035']/marc:subfield[@code='a']");

  //$tmp = $xml->xpath("//marc:datafield[@tag='035']");
  unset($node->field_system_control_number);
  
  if(count($tmp)) {
  
    foreach($tmp as $me) {
      $val = (string) $me;
      $node->field_system_control_number[LANGUAGE_NONE][]['value'] = $val;  
      drupal_set_message("{$node->title} System Control Numbers updated.");
    }
  
  }
  else {
    $node->field_system_control_number[LANGUAGE_NONE][0]['value'] = 0;  
    drupal_set_message("{$node->title} System Control Numbers updated.");

  }
  node_save($node);
  return '';  
}



/**
 * update Access Restrictions, i.e., 506 field
 */

function _cals_importer_update_licensed_access(&$entity, $context = array()) {
  if (isset($entity->nid)) {
    $node = node_load($entity->nid);
    //safety check to make sure we're parsing repos items!!    
    $content_types = array('repository_item');
    if (in_array($node->type, $content_types)  ) {
      _cals_parse_licensed_access($node);
    }
    else{
      drupal_set_message("Invalid selection: not a repos item");
    }

  }//end main if
 
  return "";
  
}



/**
 * load node, pull out "restrictions". Separating it this way allows us to also include
 * this as part of the node/%node/parse-rights-access pattern.
 */

function _cals_parse_licensed_access($node) {

  if(!isset($node->field_xml_string[LANGUAGE_NONE]) ) return ''; //get out of here if not xml string

  $xml = _cals_get_xml_string($node->field_xml_string[LANGUAGE_NONE][0]['value']); 
  
  $str = 'xyz';//placeholder string
  $tmp = $xml->xpath("//marc:datafield[@tag='506']/marc:subfield[@code='a']");
  if(!count($tmp)) {
    drupal_set_message("{$node->title} Access Restriction not updated (no 506 element).");
    return '';
  }
  $str = (string) $tmp[0];
  $tmp = strpos(strtolower($str),"restricted");
  $node->field_access_restrictions[LANGUAGE_NONE][0]['value'] = (is_numeric($tmp)) ? 1 : 0; 
    
  node_save($node);
  drupal_set_message("{$node->title} Access Restriction updated.");
  return '';  

}

function _cals_get_subjects($xml) {
  
  //let's grab the date issued!
  $have_date = FALSE;
  $date = '';
  $tmp = $xml->xpath("//marc:datafield[@tag='008']");
  if(count($tmp)) {
    $str = (string) $tmp[0];
    return _cals_get_date_from_008($str);
  }
  if($have_date === FALSE) {
    $tmp = $xml->xpath("//marc:datafield[@tag='264']/marc:subfield[@code='c']");
    if(count($tmp)) {
      $str = (string) $tmp[0];
      return _cals_get_iso_date($str);
    }
        
  } 
  if($have_date === FALSE) {
    $tmp = $xml->xpath("//marc:datafield[@tag='260']/marc:subfield[@code='c']");
    if(count($tmp)) {
      $str = (string) $tmp[0];
      return _cals_get_iso_date($str);
    }
        
  } 
  return $date;


}


function _cals_get_title_from_xml($record) {
  $arr = array();
  //loop thru datafields
  $arr['repos']['title'] = '';
  foreach($record->children(NAME_SPACE)->datafield as $datafield) {
    $tag = (string) $datafield->attributes()->tag;
    $ind1 = (string) $datafield->attributes()->ind1;
    $ind2 = (string) $datafield->attributes()->ind2;
    
    
    foreach($datafield as $subfield) {
      $code = (string) $subfield->attributes()->code;
      $str = trim((string) $subfield);
      $str = trim($str);

    
      switch($tag) {
      
        case 245:
          if($code == 'a') $arr['repos']['title'] =  $str;
          if($code == 'b') $arr['repos']['title'] .=  " " .  $str;
          $arr['repos']['title'] = _cals_get_truncated_value($arr['repos']['title'], 250);
          
          break;
          
        case "035":
          if($code == 'a') {
  
            if(strpos($str, "(OCoLC)")) {
              $arr['repos']["field_oclc_number"][] = $str;
            }
            else {
              $arr['repos']["field_system_control_number"][] = $str;
              
            }
          } 
          break;  
  
        
        
      }
    }
  }
  return $arr;
  
}

/**
 * Get an array of cataloging agencies
 *
 * @return
 *   an array of cataloging agencies
 */

function _cals_importer_get_array_cataloging_agency() {
  /*
  1|Original Cataloguing agency (NR)
  2|transcribing_agency
  3|modifying_agency
  
  */
 return array(
  "a" => 1, //"original_cataloguing_agency", 
  //"b" => "cataloguing_language", 
  "c" => 2, //"transcribing_agency",
  "d" => 3, // "modifying_agency",
  );


}
 
/** 
 * @param $arr
 *   the value (array) returned by 
 *
 * @return
 *   $val, a string
 */
function _cals_importer_get_string($arr) {
  $val = (string)$arr[0];
  return htmlspecialchars(trim($val));
}

 
/**
 * To deprecate?
 */

function _cals_importer_xml2php($xml) {
  $fils = 0;
  $tab = false;
  $array = array();

  foreach($xml->children() as $key => $value) {   
    $child = _cals_importer_xml2php($value);
    //To deal with the attributes
    foreach($node->attributes() as $ak=>$av){
      $child[$ak] = (string)$av;
    }
    //Let see if the new child is not in the array
    if($tab==false && in_array($key,array_keys($array))) {
    //If this element is already in the array we will create an indexed array
      $tmp = $array[$key];
      $array[$key] = NULL;
      $array[$key][] = $tmp;
      $array[$key][] = $child;
      $tab = true;
    }elseif($tab == true){
      //Add an element in an existing array
      $array[$key][] = $child;
    }else{
      //Add a simple element
      $array[$key] = $child;
    }
     
    $fils++;       
  }
  
  if($fils==0) {
    
    return (string)$xml;
    
  }
  
 

  return $array;
  
}



/********************/
//to deprecate??

function _cals_update_s3_path($node) {
  $paths = array();
  foreach($node->field_s3_path[LANGUAGE_NONE] as $k => $v) {
    $paths[] = $v['value'];
  }
  $paths = array_unique($paths);
  unset($node->field_s3_path[LANGUAGE_NONE]);
  foreach($paths as $path) {
    $node->field_s3_path[LANGUAGE_NONE][]['value'] = $path;
  
  }
  node_save($node);
  return "yah!";

}
